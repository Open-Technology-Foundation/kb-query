#!/bin/bash
#
# YaTTI API Key Management Tool
# 
# Manages API keys for the YaTTI knowledge base system
#

set -euo pipefail

# Configuration
VECTORDBS="${VECTORDBS:-/var/lib/vectordbs}"
AUTH_DB="$VECTORDBS/.auth/api_keys.db"
SCHEMA_FILE="/usr/share/yatti/api_keys_schema.sql"

# Colors for output
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
YELLOW=$'\033[0;33m'
BLUE=$'\033[0;34m'
NOCOLOR=$'\033[0m'

# Helper functions
die() {
    echo "${RED}Error: $1${NOCOLOR}" >&2
    exit 1
}

success() {
    echo "${GREEN}✓ $1${NOCOLOR}"
}

info() {
    echo "${BLUE}ℹ $1${NOCOLOR}"
}

warning() {
    echo "${YELLOW}⚠ $1${NOCOLOR}"
}

# Ensure auth directory exists with proper permissions
init_auth_db() {
    local auth_dir="$VECTORDBS/.auth"
    
    # Create directory if it doesn't exist
    if [[ ! -d "$auth_dir" ]]; then
        mkdir -p "$auth_dir" || die "Failed to create auth directory"
        chmod 700 "$auth_dir" || die "Failed to set auth directory permissions"
        success "Created auth directory: $auth_dir"
    fi
    
    # Initialize database if needed
    if [[ ! -f "$AUTH_DB" ]]; then
        if [[ ! -f "$SCHEMA_FILE" ]]; then
            die "Schema file not found: $SCHEMA_FILE"
        fi
        
        sqlite3 "$AUTH_DB" < "$SCHEMA_FILE" || die "Failed to initialize database"
        chmod 600 "$AUTH_DB" || die "Failed to set database permissions"
        success "Initialized API key database"
    fi
}

# Generate a secure API key
generate_api_key() {
    echo "yatti_$(openssl rand -hex 32)"
}

# Create a new API key
cmd_create() {
    local email="${1:-}"
    local description="${2:-API Key created $(date -Iseconds)}"
    local organization="${3:-}"
    
    if [[ -z "$email" ]]; then
        die "Usage: $0 create <email> [description] [organization]"
    fi
    
    # Validate email format
    if ! [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        die "Invalid email format: $email"
    fi
    
    init_auth_db
    
    # Generate API key
    local api_key=$(generate_api_key)
    local api_key_hash=$(echo -n "$api_key" | sha256sum | cut -d' ' -f1)
    local api_key_prefix="${api_key:0:8}"
    
    # Insert into database
    sqlite3 "$AUTH_DB" <<EOF || die "Failed to create API key"
INSERT INTO api_keys (
    api_key_hash, 
    api_key_prefix, 
    user_email, 
    description,
    organization,
    created_by
) VALUES (
    '$api_key_hash', 
    '$api_key_prefix', 
    '$email', 
    '$description',
    $([ -n "$organization" ] && echo "'$organization'" || echo "NULL"),
    '$(whoami)@$(hostname)'
);
EOF
    
    success "API Key created successfully!"
    echo
    echo "${GREEN}API Key:${NOCOLOR} $api_key"
    echo
    warning "IMPORTANT: Save this key securely. It cannot be retrieved later."
    echo
    info "To use with kb-query:"
    echo "  export YATTI_API_KEY='$api_key'"
    echo "  kb-query appliedanthropology 'your query'"
    echo
    info "Or add to your ~/.config/kb-query/config:"
    echo "  YATTI_API_KEY=\"$api_key\""
}

# Revoke an API key
cmd_revoke() {
    local key_prefix="${1:-}"
    
    if [[ -z "$key_prefix" ]]; then
        die "Usage: $0 revoke <key_prefix>"
    fi
    
    init_auth_db
    
    # Check if key exists
    local count=$(sqlite3 "$AUTH_DB" "SELECT COUNT(*) FROM api_keys WHERE api_key_prefix = '$key_prefix' AND is_active = 1")
    
    if [[ "$count" -eq 0 ]]; then
        die "No active API key found with prefix: $key_prefix"
    fi
    
    # Revoke the key
    sqlite3 "$AUTH_DB" <<EOF || die "Failed to revoke API key"
UPDATE api_keys 
SET is_active = 0, 
    expires_at = datetime('now')
WHERE api_key_prefix = '$key_prefix' AND is_active = 1;
EOF
    
    success "API key revoked: ${key_prefix}..."
}

# List API keys
cmd_list() {
    local email="${1:-}"
    local where_clause=""
    
    init_auth_db
    
    if [[ -n "$email" ]]; then
        where_clause="WHERE user_email = '$email'"
    fi
    
    echo "${BLUE}Active API Keys:${NOCOLOR}"
    echo
    
    sqlite3 -header -column "$AUTH_DB" <<EOF
SELECT 
    api_key_prefix || '...' as key_prefix,
    user_email,
    organization,
    description,
    datetime(created_at, 'localtime') as created,
    CASE 
        WHEN expires_at IS NOT NULL THEN datetime(expires_at, 'localtime')
        ELSE 'never'
    END as expires,
    CASE 
        WHEN last_used_at IS NOT NULL THEN datetime(last_used_at, 'localtime')
        ELSE 'never'
    END as last_used,
    CASE WHEN is_active = 1 THEN 'active' ELSE 'revoked' END as status
FROM api_keys
$where_clause
ORDER BY created_at DESC;
EOF
}

# Show usage statistics
cmd_stats() {
    local key_prefix="${1:-}"
    
    if [[ -z "$key_prefix" ]]; then
        die "Usage: $0 stats <key_prefix>"
    fi
    
    init_auth_db
    
    # Check if key exists
    local key_id=$(sqlite3 "$AUTH_DB" "SELECT id FROM api_keys WHERE api_key_prefix = '$key_prefix' LIMIT 1")
    
    if [[ -z "$key_id" ]]; then
        die "No API key found with prefix: $key_prefix"
    fi
    
    echo "${BLUE}API Key Statistics for ${key_prefix}...${NOCOLOR}"
    echo
    
    # Overall stats
    sqlite3 -header -column "$AUTH_DB" <<EOF
SELECT 
    COUNT(*) as total_requests,
    COUNT(DISTINCT kb_name) as unique_kbs,
    COUNT(DISTINCT DATE(created_at)) as active_days,
    ROUND(AVG(response_time), 3) as avg_response_time,
    ROUND(AVG(query_length), 0) as avg_query_length,
    datetime(MIN(created_at), 'localtime') as first_use,
    datetime(MAX(created_at), 'localtime') as last_use
FROM api_key_usage
WHERE api_key_id = $key_id;
EOF
    
    echo
    echo "${BLUE}Requests by Knowledge Base:${NOCOLOR}"
    echo
    
    # KB breakdown
    sqlite3 -header -column "$AUTH_DB" <<EOF
SELECT 
    kb_name,
    COUNT(*) as requests,
    ROUND(AVG(response_time), 3) as avg_response_time
FROM api_key_usage
WHERE api_key_id = $key_id AND kb_name != ''
GROUP BY kb_name
ORDER BY requests DESC
LIMIT 10;
EOF
    
    echo
    echo "${BLUE}Recent Activity (last 24 hours):${NOCOLOR}"
    echo
    
    # Hourly breakdown for last 24 hours
    sqlite3 -header -column "$AUTH_DB" <<EOF
SELECT 
    strftime('%Y-%m-%d %H:00', created_at, 'localtime') as hour,
    COUNT(*) as requests
FROM api_key_usage
WHERE api_key_id = $key_id 
  AND created_at > datetime('now', '-24 hours')
GROUP BY hour
ORDER BY hour DESC;
EOF
}

# Set permissions for an API key
cmd_permissions() {
    local key_prefix="${1:-}"
    local permissions="${2:-}"
    
    if [[ -z "$key_prefix" ]] || [[ -z "$permissions" ]]; then
        die "Usage: $0 permissions <key_prefix> <permissions>
Permissions: read, write, admin (comma-separated)"
    fi
    
    init_auth_db
    
    # Validate permissions
    local valid_perms="read write admin"
    IFS=',' read -ra perm_array <<< "$permissions"
    for perm in "${perm_array[@]}"; do
        perm=$(echo "$perm" | tr -d ' ')
        if ! [[ " $valid_perms " =~ " $perm " ]]; then
            die "Invalid permission: $perm"
        fi
    done
    
    # Convert to JSON array
    local json_perms=$(printf '%s\n' "${perm_array[@]}" | jq -R . | jq -s .)
    
    # Update permissions
    sqlite3 "$AUTH_DB" <<EOF || die "Failed to update permissions"
UPDATE api_keys 
SET permissions = '$json_perms'
WHERE api_key_prefix = '$key_prefix' AND is_active = 1;
EOF
    
    success "Permissions updated for ${key_prefix}..."
}

# Set allowed knowledge bases
cmd_allow_kb() {
    local key_prefix="${1:-}"
    local kbs="${2:-}"
    
    if [[ -z "$key_prefix" ]]; then
        die "Usage: $0 allow-kb <key_prefix> <kb1,kb2,...>
Use 'all' to allow access to all knowledge bases"
    fi
    
    init_auth_db
    
    if [[ "$kbs" == "all" ]] || [[ -z "$kbs" ]]; then
        # Allow all KBs
        sqlite3 "$AUTH_DB" <<EOF || die "Failed to update allowed KBs"
UPDATE api_keys 
SET allowed_kbs = NULL
WHERE api_key_prefix = '$key_prefix' AND is_active = 1;
EOF
        success "API key ${key_prefix}... can now access all knowledge bases"
    else
        # Set specific KBs
        IFS=',' read -ra kb_array <<< "$kbs"
        local json_kbs=$(printf '%s\n' "${kb_array[@]}" | jq -R . | jq -s .)
        
        sqlite3 "$AUTH_DB" <<EOF || die "Failed to update allowed KBs"
UPDATE api_keys 
SET allowed_kbs = '$json_kbs'
WHERE api_key_prefix = '$key_prefix' AND is_active = 1;
EOF
        success "API key ${key_prefix}... can now access: ${kbs}"
    fi
}

# Set rate limit
cmd_rate_limit() {
    local key_prefix="${1:-}"
    local limit="${2:-}"
    
    if [[ -z "$key_prefix" ]] || [[ -z "$limit" ]]; then
        die "Usage: $0 rate-limit <key_prefix> <requests_per_hour>"
    fi
    
    if ! [[ "$limit" =~ ^[0-9]+$ ]] || [[ "$limit" -lt 1 ]]; then
        die "Rate limit must be a positive integer"
    fi
    
    init_auth_db
    
    sqlite3 "$AUTH_DB" <<EOF || die "Failed to update rate limit"
UPDATE api_keys 
SET rate_limit = $limit
WHERE api_key_prefix = '$key_prefix' AND is_active = 1;
EOF
    
    success "Rate limit updated to $limit requests/hour for ${key_prefix}..."
}

# Show help
cmd_help() {
    cat <<EOF
${BLUE}YaTTI API Key Management${NOCOLOR}

Manage API keys for the YaTTI knowledge base system.

${GREEN}Usage:${NOCOLOR} $0 <command> [options]

${GREEN}Commands:${NOCOLOR}
  create <email> [desc] [org]   Create new API key
  revoke <key_prefix>           Revoke an API key
  list [email]                  List API keys
  stats <key_prefix>            Show usage statistics
  permissions <prefix> <perms>  Set permissions (read,write,admin)
  allow-kb <prefix> <kbs>       Set allowed KBs (comma-separated or 'all')
  rate-limit <prefix> <limit>   Set rate limit (requests per hour)
  help                          Show this help message

${GREEN}Examples:${NOCOLOR}
  # Create a new API key
  $0 create user@example.com "Production API key" "ACME Corp"
  
  # List all keys for a user
  $0 list user@example.com
  
  # Revoke a key
  $0 revoke yatti_1a2
  
  # View usage statistics
  $0 stats yatti_1a2
  
  # Set permissions
  $0 permissions yatti_1a2 "read,write"
  
  # Restrict to specific knowledge bases
  $0 allow-kb yatti_1a2 "appliedanthropology,garydean"
  
  # Set custom rate limit
  $0 rate-limit yatti_1a2 5000

${GREEN}Environment Variables:${NOCOLOR}
  VECTORDBS    Path to vector databases (default: /var/lib/vectordbs)

${GREEN}Files:${NOCOLOR}
  Auth DB: $AUTH_DB
EOF
}

# Main command dispatcher
case "${1:-help}" in
    create)
        shift
        cmd_create "$@"
        ;;
    revoke)
        shift
        cmd_revoke "$@"
        ;;
    list)
        shift
        cmd_list "$@"
        ;;
    stats)
        shift
        cmd_stats "$@"
        ;;
    permissions|perms)
        shift
        cmd_permissions "$@"
        ;;
    allow-kb|allow_kb)
        shift
        cmd_allow_kb "$@"
        ;;
    rate-limit|rate_limit)
        shift
        cmd_rate_limit "$@"
        ;;
    help|-h|--help)
        cmd_help
        ;;
    *)
        echo "${RED}Unknown command: $1${NOCOLOR}" >&2
        echo "Run '$0 help' for usage information" >&2
        exit 1
        ;;
esac

# fin