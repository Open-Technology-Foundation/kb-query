#!/usr/bin/env bash
#shellcheck disable=SC1091,SC2155
set -euo pipefail
readonly -- PRG0="$(readlink -en -- "$0")"
#shellcheck disable=SC2034
readonly -- PRGDIR="${PRG0%/*}" PRG="${PRG0##*/}"
readonly -- LF=$'\n'
declare -- VERSION="$(head -n 1 "$PRGDIR"/.version || true)"
declare -ix VERBOSE=1 DEBUG=0 DRYRUN=1
#shellcheck disable=SC2015
[ -t 2 ] && declare -- RED=$'\033[0;31m' YELLOW=$'\033[0;33m' GREEN=$'\033[0;32m' NOCOLOR=$'\033[0m' || declare -- RED='' YELLOW='' GREEN='' NOCOLOR=''
vdebug(){ ((DEBUG))   || return 0; local msg; for msg in "$@"; do >&2 printf '%s: %sdebug%s: %s\n' "$PRG" "$YELLOW" "$NOCOLOR" "$msg"; done; }
error() { local msg; for msg in "$@"; do >&2 printf '%s: %serror%s: %s\n' "$PRG" "$RED" "$NOCOLOR" "$msg"; done; }
die() { local -i exitcode=1; if (($#)); then exitcode=$1; shift; fi; if (($#)); then error "$@"; fi; exit "$exitcode"; }
grep() { /usr/bin/grep "$@"; }
find() { /usr/bin/find "$@"; }
rsync() { /usr/bin/rsync "$@"; }
ssh() { /usr/bin/ssh "$@"; }
scp() { /usr/bin/scp "$@"; }
sed() { /usr/bin/sed "$@"; }
declare -fx grep find rsync ssh scp sed
noarg() { if (($# < 2)) || [[ ${2:0:1} == '-' ]]; then die 2 "Missing argument for option '$1'"; fi; true; }
decp() { declare -p "$@" | sed 's/^declare -[a-zA-Z-]* //'; }
xcleanup() { local -i exitcode=${1:-0}; exit "$exitcode"; }
trap 'xcleanup $?' SIGINT EXIT
# ----------------------------------------------------------------------------------------

declare -x VECTORDBS=${VECTORDBS:-/var/lib/vectordbs}

declare -i MAX_REFERENCE_SIZE=4000

usage() {
  local -i exitcode=${1:-0}
  local -- helptext=$(cat <<EOT
$PRG $VERSION - Interface into YaTTI CustomKB knowledgebase API

Requires:

    sudo apt install git curl jq gridsite-clients


Installation:

    git clone https://github.com/Open-Technology-Foundation/kb-query.git && sudo kb-query/kb-query.install


json Return Fields:

   ( kb query context_only reference response elapsed_seconds error )


Usage:

  $PRG {command} [.field1 [.field2 ...]]

    command         list | help | update


  $PRG [OPTIONS] {knowledgebase} {query} [.field1 [.field2 ...]]

    knowledgebase   name of customKB knowledgebase

    query           query string for LLM

    .field{1...}    fields to output, default is all.

Options:
  -r, --reference-file FILE
                    Reference filename
                    $(decp reference_file)
  -R, --reference-str TEXT
                    Reference string
                    $(decp reference_text)
  -c, --context-only
                    Return entire context reference only,
                    do not send to LLM.
                    $(decp context_only)

  --query-model LLM
                    LLM to use for query (if not context_only)
  --query-temperature TEMP
                    LLM Query Temperature
  --query-max-tokens
                    LLM max tokens allowed

  --query-top-k SEGMENTS
                    Number of SEGMENTS to return
  --query-context-scope SCOPE
                    Number of SEGMENTS above/below to return
                    ("aperture")
                    Eg,
                      A SCOPE of 1 only returns the match segment.
                      A SCOPE of 2 returns the match segment and the next segment.
                      A SCOPE of 3 returns the match segment, the previous segment, and the next segment.
                      A SCOPE of 4 returns the match segment, the previous segment, and the next 2 segments.
  --query-role ROLE
                    System ROLE
  --query-context-files FILE[,FILE...]
                    Context files

  -v, --verbose         Increase output verbosity
  -q, --quiet           Suppress non-error messages
                        $(decp VERBOSE)
  -d, --debug           Print debug messages
                        $(decp DEBUG)
  -V, --version         Print version and exit
                        $(decp VERSION)
  -h, --help            Display this help

Examples:

  # Help for $PRG utility

    $PRG --help

  # Overview YaTTI knowledgebase

    $PRG help

  # List YaTTI knowledgebases

    $PRG list

  # Query knowledgebase

    $PRG appliedanthropology "Concisely define 'applied anthropology'."

  # Query knowledgebase and output fields .query and .response

    $PRG appliedanthropology "Concisely define 'applied anthropology'." .query .response

  # Query knowledgebase for context only, with context reference

    $PRG appliedanthropology -c -r previouscontext.txt "Concisely define 'applied anthropology'."

  # Update to latest version

    $PRG update

EOT
)
  ((exitcode)) && >&2 echo "$helptext" || echo "$helptext"
  [[ -z "${1:-}" ]] && return
  exit "$exitcode"
}


#    VECTOR_MODEL
#    VECTOR_DIMENSIONS
#    VECTOR_CHUNKS
#    DB_MIN_TOKENS
#    DB_MAX_TOKENS
declare -a EnvVars=(
    QUERY_MODEL
    QUERY_TOP_K
    QUERY_TEMPERATURE
    QUERY_MAX_TOKENS
    QUERY_ROLE
    QUERY_CONTEXT_SCOPE
    QUERY_CONTEXT_FILES
  )

declare -a Options=()

#  kb_query "$kb" "$context_only" "$query" "$reference" ${fields[*]}
kbquery() {
  # kb c query ref
  local BASEURL='https://yatti.id/v1'
  [[ $HOSTNAME == 'okusi' ]] && BASEURL='https://yatti.id.local/v1'
  local kb="$1"
  shift
  local context_only=$( ((${1:-0})) && echo 'context_only' || echo '' )
  shift
  local query="${1:-}"
  shift
  local reference="${1:-}"
  shift
  local field fields='' comma='' # no comma at the start
  while (($#)); do
    field="$1"
    [[ -z $field ]] && continue
    [[ "${field:0:1}" != '.' ]] && field=".$field"
    fields+="$comma$field"
    comma=, # there could be more to come
    shift
  done
  [[ -z $fields ]] && fields='.response'

  ((DEBUG)) && >&2 decp BASEURL kb context_only query reference fields

  if [[ $kb == update || $kb == upgrade ]]; then
    update_exec=/tmp/kb-query.update.from.git."$$""$RANDOM".sh
    cat <<-EOT >"$update_exec"
#!/bin/bash
set -e
mkdir -p /tmp/kb-query-update
cd /tmp/kb-query-update
rm -rf kb-query
git clone https://github.com/Open-Technology-Foundation/kb-query.git
exec sudo kb-query/kb-query.install
EOT
    chmod 770 "$update_exec"
    exec "$update_exec"
    exit
  fi

  [[ $kb == 'list' ]] && kb='list.canonical'
  if [[ ${kb:0:5} == 'list.' ]]; then
    fields=${kb/list/.response}
    kb=list query=list
    context_only=''
  fi

  if [[ $kb == 'help' || $kb == '-h' || $kb == '--help' ]]; then
    fields=${kb/help/.response}
    kb=help query=help
    context_only=''
  fi

  [[ -n $query ]] && {
    query=$(echo -e "$query")
    query="$(urlencode "$query")"
  }

  [[ -n $context_only ]] && context_only="&$context_only"

  [[ -n $reference ]] && {
    reference=$(echo -e "$reference")
    reference="&reference=$(urlencode "$reference")"
  }

  options=''
  for option in "${EnvVars[@]}"; do
    [[ -v $option ]] || continue
    options+="&$option=${!option}"
  done
  for option in "${Options[@]}"; do
    options+="&$option"
  done

  # Debug output
  ((DEBUG)) && {
    IFS=$'\n' readarray -t files < <(decp BASEURL kb context_only query fields reference options)
    vdebug "${files[@]}"
  }

  result="$(curl -X POST \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -s "$BASEURL/$kb/?q="$query"$context_only$reference$options"
        )"
  ((DEBUG)) && vdebug "$result"
  jq -r $fields <<<"$result"
}


#=============================================================================
main() {
  local -i context_only=0
  local command='' query='' reference='' reference_file='' reference_text=''
  local -a fields=()

  local -- option=''
  while (($#)); do case "$1" in
    -r|--reference-file)
                  noarg "$@"; shift; reference_file="$1"
                  ;;
    -R|--reference-str)
                  noarg "$@"; shift; reference_text="$1"
                  ;;
    -c|--context-only|--context)
                  context_only=1
                  ;;

    -d|--debug)   DEBUG=1; VERBOSE+=1 ;;
    -h|--help)    usage 0;; -v|--verbose) VERBOSE+=1;; -q|--quiet) VERBOSE=0;; -V|--version) echo "$PRG $VERSION"; exit 0;;
    -[rRcdhvqV]*) #shellcheck disable=SC2046 #split up single options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
    --*)          noarg "$@"
                  option="${1/--/}"
                  option="${option^^}"
                  option="${option//-/_}"
                  shift
                  arg="$1"
                  [[ "${EnvVars[*]}" == *"$option"* ]] || die 1 "Invalid EnvVar '$option'"
                  Options+=( "$option=$arg" )
                  ;;

    -*)           die 22 "Invalid option '$1'" ;;
    *)            if [[ -z $command ]]; then
                    command="$1"
                  elif [[ -z $query ]]; then
                    query="$1"
                  else
                    fields+=( "$1" )
                  fi
                  ;;
  esac; shift; done
  [[ -z $command ]] && usage 1

  if [[ -n $reference_text ]]; then
    reference="$reference_text"
  fi
  if [[ -n $reference_file ]]; then
    [[ -f $reference_file ]] || die 1 "Reference file '$reference_file' not found."
    reference+="$(cat -s "$reference_file")$LF"
  fi

  (( ${#reference} > MAX_REFERENCE_SIZE )) && {
    >&2 echo "Reference string too long (${#reference}>$MAX_REFERENCE_SIZE)"
    >&2 echo "Truncating"
    reference=${reference: -$MAX_REFERENCE_SIZE}
  }

  vdebug "0: kb_query \"$command\" \"$context_only\" \"$query\" \"${reference}\" \"${fields[*]}\" \"${Options[*]}\""

  kbquery "$command" "$context_only" "$query" "$reference" ${fields[*]}
}

main "$@"
#fin
