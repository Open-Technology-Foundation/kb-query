#!/usr/bin/env bash
#shellcheck disable=SC1091,SC2155,SC1090
set -euo pipefail

declare -r SCRIPT_PATH="$(realpath -e -- "$0")"
#shellcheck disable=SC2034
declare -r SCRIPT_DIR="${SCRIPT_PATH%/*}" PRG="${SCRIPT_PATH##*/}"
declare -r LF=$'\n'
declare -r VERSION="$(head -n 1 "$SCRIPT_DIR"/.version || true)"

declare -ix VERBOSE=1 DEBUG=0 DRYRUN=1
#shellcheck disable=SC2015
[ -t 2 ] && declare -r RED=$'\033[0;31m' YELLOW=$'\033[0;33m' GREEN=$'\033[0;32m' NOCOLOR=$'\033[0m' || declare -r RED='' YELLOW='' GREEN='' NOCOLOR=''
vdebug(){ ((DEBUG))   || return 0; local msg; for msg in "$@"; do >&2 printf '%s: %sdebug%s: %s\n' "$PRG" "$YELLOW" "$NOCOLOR" "$msg"; done; }
error() { local msg; for msg in "$@"; do >&2 printf '%s: %serror%s: %s\n' "$PRG" "$RED" "$NOCOLOR" "$msg"; done; }
die() { local -i exitcode=1; if (($#)); then exitcode=$1; shift; fi; if (($#)); then error "$@"; fi; exit "$exitcode"; }
grep() { /usr/bin/grep "$@"; }
find() { /usr/bin/find "$@"; }
rsync() { /usr/bin/rsync "$@"; }
ssh() { /usr/bin/ssh "$@"; }
scp() { /usr/bin/scp "$@"; }
sed() { /usr/bin/sed "$@"; }
declare -fx grep find rsync ssh scp sed
noarg() { if (($# < 2)) || [[ ${2:0:1} == '-' ]]; then die 2 "Missing argument for option '$1'"; fi; true; }
decp() { declare -p "$@" | sed 's/^declare -[a-zA-Z-]* //'; }
xcleanup() { local -i exitcode=${1:-0}; exit "$exitcode"; }
trap 'xcleanup $?' SIGINT EXIT
# ----------------------------------------------------------------------------------------

# Configuration file support
declare -- CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/kb-query"
declare -- CONFIG_FILE="$CONFIG_DIR/config"
declare -- CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/kb-query"
declare -- DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/kb-query"
declare -- HISTORY_FILE="$DATA_DIR/history"

# Load configuration if exists
[[ -f "$CONFIG_FILE" ]] && source "$CONFIG_FILE"

# Check config file permissions if it contains API key
if [[ -f "$CONFIG_FILE" ]] && grep -q "YATTI_API_KEY" "$CONFIG_FILE" 2>/dev/null; then
    declare -- perms=$(stat -c %a "$CONFIG_FILE" 2>/dev/null || stat -f %p "$CONFIG_FILE" 2>&1 | awk '{print substr($0, length-2)}')
    if [[ "$perms" != "600" ]]; then
        >&2 echo "${YELLOW}Warning: Config file has loose permissions ($perms)${NOCOLOR}"
        >&2 echo "Your API key may be exposed. Run: chmod 600 $CONFIG_FILE"
    fi
fi

declare -x VECTORDBS=${VECTORDBS:-/var/lib/vectordbs}

declare -i MAX_REFERENCE_SIZE=${MAX_REFERENCE_SIZE:-4000}
declare -i API_TIMEOUT=${API_TIMEOUT:-30}
declare -- OUTPUT_FORMAT=${OUTPUT_FORMAT:-text}

# API Authentication
declare -- API_KEY="${YATTI_API_KEY:-}"

usage() {
  local -i exitcode=${1:-0}
  local -- helptext=$(cat <<EOT
$PRG $VERSION - Interface into YaTTI CustomKB knowledgebase API

Requires:

    sudo apt install git curl jq gridsite-clients


Installation:

    git clone https://github.com/Open-Technology-Foundation/kb-query.git && sudo kb-query/kb-query.install


json Return Fields:

   ( kb query context_only reference response elapsed_seconds error )


Usage:

  $PRG {command} [.field1 [.field2 ...]]

    command         list | help | update


  $PRG [OPTIONS] {knowledgebase} {query} [.field1 [.field2 ...]]

    knowledgebase   name of customKB knowledgebase

    query           query string for LLM

    .field{1...}    fields to output, default is all.

Options:
  -r, --reference-file FILE
                    Reference filename
                    $(decp reference_file)
  -R, --reference-str TEXT
                    Reference string
                    $(decp reference_text)
  -c, --context-only
                    Return entire context reference only,
                    do not send to LLM.
                    $(decp context_only)

  --query-model LLM
                    LLM to use for query (if not context_only)
  --query-temperature TEMP
                    LLM Query Temperature
  --query-max-tokens
                    LLM max tokens allowed

  --query-top-k SEGMENTS
                    Number of SEGMENTS to return
  --query-context-scope SCOPE
                    Number of SEGMENTS above/below to return
                    ("aperture")
                    Eg,
                      A SCOPE of 1 only returns the match segment.
                      A SCOPE of 2 returns the match segment and the next segment.
                      A SCOPE of 3 returns the match segment, the previous segment, and the next segment.
                      A SCOPE of 4 returns the match segment, the previous segment, and the next 2 segments.
  --query-role ROLE
                    System ROLE
  --query-context-files FILE[,FILE...]
                    Context files

  --output-format FORMAT
                    Output format: json, text, markdown
                    $(decp OUTPUT_FORMAT)
  --timeout SECONDS
                    API request timeout in seconds
                    $(decp API_TIMEOUT)

  --api-key KEY     API authentication key
                    WARNING: Exposes key in process list
                    Prefer: export YATTI_API_KEY="your-key"
                    $(decp API_KEY)

  -v, --verbose         Increase output verbosity
  -q, --quiet           Suppress non-error messages
                        $(decp VERBOSE)
  -d, --debug           Print debug messages
                        $(decp DEBUG)
  -V, --version         Print version and exit
                        $(decp VERSION)
  -h, --help            Display this help

Examples:

  # Help for $PRG utility

    $PRG --help

  # Overview YaTTI knowledgebase

    $PRG help

  # List YaTTI knowledgebases

    $PRG list

  # Query knowledgebase

    $PRG appliedanthropology "Concisely define 'applied anthropology'."

  # Query knowledgebase and output fields .query and .response

    $PRG appliedanthropology "Concisely define 'applied anthropology'." .query .response

  # Query knowledgebase for context only, with context reference

    $PRG appliedanthropology -c -r previouscontext.txt "Concisely define 'applied anthropology'."

  # Update to latest version

    $PRG update

  # Query with custom output format

    $PRG --output-format json appliedanthropology "What is dharma?"

  # Query with custom timeout

    $PRG --timeout 60 appliedanthropology "Complex analysis question"

EOT
)
  ((exitcode)) && >&2 echo "$helptext" || echo "$helptext"
  [[ -z "${1:-}" ]] && return
  exit "$exitcode"
}


#    VECTOR_MODEL
#    VECTOR_DIMENSIONS
#    VECTOR_CHUNKS
#    DB_MIN_TOKENS
#    DB_MAX_TOKENS
declare -a EnvVars=(
    QUERY_MODEL
    QUERY_TOP_K
    QUERY_TEMPERATURE
    QUERY_MAX_TOKENS
    QUERY_ROLE
    QUERY_CONTEXT_SCOPE
    QUERY_CONTEXT_FILES
  )

declare -a Options=()

#  kb_query "$kb" "$context_only" "$query" "$reference" ${fields[*]}
kbquery() {
  # kb c query ref
  local BASEURL='https://yatti.id/v1/index.php'
  # [[ $HOSTNAME == 'okusi' ]] && BASEURL='https://yatti.id.local/v1'  # Disabled - always use public endpoint
  local kb="$1"
  shift
  local context_only=$( ((${1:-0})) && echo 'context_only' || echo '' )
  shift
  local query="${1:-}"
  shift
  local reference="${1:-}"
  shift
  local field fields='' comma='' # no comma at the start
  while (($#)); do
    field="$1"
    [[ -z $field ]] && continue
    [[ "${field:0:1}" != '.' ]] && field=".$field"
    fields+="$comma$field"
    comma=, # there could be more to come
    shift
  done
  [[ -z $fields ]] && fields='.response'

  ((DEBUG)) && >&2 decp BASEURL kb context_only query reference fields

  if [[ $kb == update || $kb == upgrade ]]; then
    # Secure temp file creation using mktemp
    update_exec=$(mktemp /tmp/kb-query.update.XXXXXX.sh) || die 1 "Failed to create temp file"
    cat <<-EOT >"$update_exec"
#!/bin/bash
set -e
mkdir -p /tmp/kb-query-update
cd /tmp/kb-query-update
rm -rf kb-query
git clone https://github.com/Open-Technology-Foundation/kb-query.git
exec sudo kb-query/kb-query.install
EOT
    chmod 770 "$update_exec"
    exec "$update_exec"
    exit
  fi

  # Cache management for list command
  if [[ $kb == 'list' ]] || [[ ${kb:0:5} == 'list.' ]]; then
    local cache_file="$CACHE_DIR/kb-list"
    local cache_ttl=${KB_LIST_CACHE_TTL:-3600}
    
    # Check if we should use cache
    if [[ -f "$cache_file" ]] && [[ $(( $(date +%s) - $(stat -c %Y "$cache_file" 2>/dev/null || echo 0) )) -lt $cache_ttl ]]; then
      # Use cached result
      ((DEBUG)) && vdebug "Using cached KB list"
      result="$(cat "$cache_file")"
      if [[ ${kb:0:5} == 'list.' ]]; then
        fields=${kb/list/.response}
      fi
      jq -r $fields <<<"$result"
      return 0
    fi
  fi
  
  [[ $kb == 'list' ]] && kb='list.canonical'
  if [[ ${kb:0:5} == 'list.' ]]; then
    fields=${kb/list/.response}
    kb=list query=list
    context_only=''
  fi

  if [[ $kb == 'help' || $kb == '-h' || $kb == '--help' ]]; then
    fields=${kb/help/.response}
    kb=help query=help
    context_only=''
  fi

  [[ -n $query ]] && {
    # Use printf instead of echo -e for better security
    query=$(printf '%b' "$query")
    query="$(urlencode "$query")"
  }

  [[ -n $context_only ]] && context_only="&$context_only"

  [[ -n $reference ]] && {
    # Use printf instead of echo -e for better security
    reference=$(printf '%b' "$reference")
    reference="&reference=$(urlencode "$reference")"
  }

  options=''
  for option in "${EnvVars[@]}"; do
    [[ -v $option ]] || continue
    # URL encode option values for security
    options+="&$option=$(urlencode "${!option}")"
  done
  for option in "${Options[@]}"; do
    # Options array already contains key=value pairs
    options+="&$option"
  done

  # Debug output
  ((DEBUG)) && {
    IFS=$'\n' readarray -t files < <(decp BASEURL kb context_only query fields reference options)
    vdebug "${files[@]}"
    # Mask API key in debug output
    if [[ -n "$API_KEY" ]]; then
      vdebug "Using API key: ${API_KEY:0:8}...${API_KEY: -4}"
    fi
  }

  # Add authentication headers if API key is provided
  local auth_headers=""
  if [[ -n "$API_KEY" ]]; then
    auth_headers="-H \"Authorization: Bearer $API_KEY\""
  fi

  # Show progress if not quiet
  if ! ((VERBOSE == 0)); then
    printf "Querying %s... " "$kb" >&2
  fi
  
  # Add timeout and capture curl exit code
  result="$(eval curl --silent --max-time "$API_TIMEOUT" -X POST \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        $auth_headers \
        "$BASEURL/$kb/?q="$query"$context_only$reference$options"
        )" || {
    curl_exit=$?
    case $curl_exit in
      7)  die 1 "Failed to connect to API endpoint: $BASEURL/$kb/" ;;
      28) die 1 "Request timeout - API took too long to respond" ;;
      401) die 1 "Authentication failed - check your API key" ;;
      403) die 1 "Access forbidden - API key may lack permissions" ;;
      429) die 1 "Rate limit exceeded - too many requests" ;;
      *)  die 1 "Network error (curl exit code: $curl_exit)" ;;
    esac
  }

#result="$(curl --silent -X POST \
#  -H "Accept: application/json" \
#  -H "Content-Type: application/x-www-form-urlencoded" \
#  --data-urlencode "query=$query" \
#  --data-urlencode "context_only=$context_only" \
#  --data-urlencode "reference=$reference" \
#  --data-urlencode "options=$options" \
#  "$BASEURL/$kb/")"

#  result="$(curl  -X POST \
#    -H "Accept: application/json" \
#    -H "Content-Type: application/json" \
#    --data '{
#      "query": "'"$query"'",
#      "context_only": "'"$context_only"'",
#      "reference": "'"$reference"'",
#      "options": "'"$options"'"
#    }' \
#    "$BASEURL/$kb/")"


  # Complete progress indicator
  if ! ((VERBOSE == 0)); then
    printf "done\n" >&2
  fi
  
  ((DEBUG)) && vdebug "$result"
  
  # Validate JSON response
  if [[ -z "$result" ]]; then
    die 1 "Empty response from API"
  fi
  
  if ! jq -e . >/dev/null 2>&1 <<<"$result"; then
    die 1 "Invalid JSON response from API: $result"
  fi
  
  # Check for API error messages
  if jq -e '.error' >/dev/null 2>&1 <<<"$result"; then
    error_msg=$(jq -r '.error // "Unknown error"' <<<"$result")
    die 1 "API Error: $error_msg"
  fi
  
  # Check for null response on non-list/help commands
  if [[ "$kb" != "list" ]] && [[ "$kb" != "help" ]] && [[ $(jq -r '.response // "null"' <<<"$result") == "null" ]]; then
    die 1 "Knowledgebase '$kb' not found or returned no data"
  fi
  
  # Format output based on OUTPUT_FORMAT
  case "$OUTPUT_FORMAT" in
    json)
      # Output raw JSON
      jq . <<<"$result"
      ;;
    markdown)
      # Format as markdown with metadata
      if [[ "$fields" == ".response" ]]; then
        echo "## Query Response"
        echo
        jq -r '.response // empty' <<<"$result"
        echo
        echo "---"
        echo "*Knowledgebase: $(jq -r '.kb // "unknown"' <<<"$result")*"
        echo "*Query Time: $(jq -r '.elapsed_seconds // "unknown"' <<<"$result") seconds*"
      else
        jq -r $fields <<<"$result"
      fi
      ;;
    text|*)
      # Default text output
      jq -r $fields <<<"$result"
      ;;
  esac
  
  # Save to cache if it's a list command
  if [[ "$kb" == "list" ]]; then
    mkdir -p "$CACHE_DIR"
    echo "$result" > "$CACHE_DIR/kb-list"
    ((DEBUG)) && vdebug "Cached KB list"
  fi
  
  # Save to history if successful and not a command
  if [[ "$kb" != "list" ]] && [[ "$kb" != "help" ]] && [[ "$kb" != "update" ]] && [[ -n "$query" ]]; then
    # Create directory if it doesn't exist
    mkdir -p "$DATA_DIR"
    # Append to history with timestamp
    echo "$(date -Iseconds) | $kb | $query" >> "$HISTORY_FILE"
  fi
}


#=============================================================================
main() {
  local -i context_only=0
  local command='' query='' reference='' reference_file='' reference_text=''
  local -a fields=()

  local -- option=''
  while (($#)); do case "$1" in
    -r|--reference-file)
                  noarg "$@"; shift; reference_file="$1"
                  ;;
    -R|--reference-str)
                  noarg "$@"; shift; reference_text="$1"
                  ;;
    -c|--context-only|--context)
                  context_only=1
                  ;;
    --output-format)
                  noarg "$@"; shift; OUTPUT_FORMAT="$1"
                  case "$OUTPUT_FORMAT" in
                    json|text|markdown) ;;
                    *) die 1 "Invalid output format: $OUTPUT_FORMAT (must be json, text, or markdown)" ;;
                  esac
                  ;;
    --timeout)
                  noarg "$@"; shift; API_TIMEOUT="$1"
                  [[ "$API_TIMEOUT" =~ ^[0-9]+$ ]] || die 1 "Timeout must be a positive integer"
                  ;;
    --api-key)
                  noarg "$@"; shift; API_KEY="$1"
                  >&2 echo "${YELLOW}Warning: --api-key exposes key in process list${NOCOLOR}"
                  >&2 echo "Prefer: export YATTI_API_KEY='your-key'"
                  ;;

    -d|--debug)   DEBUG=1; VERBOSE+=1 ;;
    -h|--help)    usage 0;; -v|--verbose) VERBOSE+=1;; -q|--quiet) VERBOSE=0;; -V|--version) echo "$PRG $VERSION"; exit 0;;
    -[rRcdhvqV]*) #shellcheck disable=SC2046 #split up single options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
    --*)          noarg "$@"
                  option="${1/--/}"
                  option="${option^^}"
                  option="${option//-/_}"
                  shift
                  arg="$1"
                  [[ "${EnvVars[*]}" == *"$option"* ]] || die 1 "Invalid EnvVar '$option'"
                  Options+=( "$option=$arg" )
                  ;;

    -*)           die 22 "Invalid option '$1'" ;;
    *)            if [[ -z $command ]]; then
                    command="$1"
                  elif [[ -z $query ]]; then
                    query="$1"
                  else
                    fields+=( "$1" )
                  fi
                  ;;
  esac; shift; done
  [[ -z $command ]] && usage 1

  if [[ -n $reference_text ]]; then
    reference="$reference_text"
  fi
  if [[ -n $reference_file ]]; then
    [[ -f $reference_file ]] || die 1 "Reference file '$reference_file' not found."
    # Validate file path to prevent directory traversal
    if [[ "$reference_file" =~ \.\. ]] || [[ "$reference_file" =~ ^/ ]] && [[ ! "$reference_file" =~ ^/home/|^/tmp/|^/var/tmp/ ]]; then
      die 1 "Invalid reference file path: '$reference_file'"
    fi
    reference+="$(cat -s "$reference_file")$LF"
  fi

  (( ${#reference} > MAX_REFERENCE_SIZE )) && {
    >&2 echo "Reference string too long (${#reference}>$MAX_REFERENCE_SIZE)"
    >&2 echo "Truncating"
    reference=${reference: -$MAX_REFERENCE_SIZE}
  }

  vdebug "0: kb_query \"$command\" \"$context_only\" \"$query\" \"${reference}\" \"${fields[*]}\" \"${Options[*]}\""

  kbquery "$command" "$context_only" "$query" "$reference" "${fields[@]}"
}

main "$@"
#fin
