#!/usr/bin/env bash
#shellcheck disable=SC1091,SC2155
set -euo pipefail
readonly -- PRG0="$(readlink -en -- "$0")"
#shellcheck disable=SC2034
readonly -- PRGDIR="${PRG0%/*}" PRG="${PRG0##*/}"
declare -- VERSION="$(head -n 1 "$PRGDIR"/.version || true)"
declare -ix VERBOSE=1 DEBUG=0 DRYRUN=1
#shellcheck disable=SC2015
[ -t 2 ] && declare -- RED=$'\033[0;31m' YELLOW=$'\033[0;33m' GREEN=$'\033[0;32m' NOCOLOR=$'\033[0m' || declare -- RED='' YELLOW='' GREEN='' NOCOLOR=''
vdebug(){ ((DEBUG))   || return 0; local msg; for msg in "$@"; do >&2 printf '%s: %sdebug%s: %s\n' "$PRG" "$YELLOW" "$NOCOLOR" "$msg"; done; }
error() { local msg; for msg in "$@"; do >&2 printf '%s: %serror%s: %s\n' "$PRG" "$RED" "$NOCOLOR" "$msg"; done; }
die() { local -i exitcode=1; if (($#)); then exitcode=$1; shift; fi; if (($#)); then error "$@"; fi; exit "$exitcode"; }
grep() { /usr/bin/grep "$@"; }
find() { /usr/bin/find "$@"; }
rsync() { /usr/bin/rsync "$@"; }
ssh() { /usr/bin/ssh "$@"; }
scp() { /usr/bin/scp "$@"; }
sed() { /usr/bin/sed "$@"; }
declare -fx grep find rsync ssh scp sed
noarg() { if (($# < 2)) || [[ ${2:0:1} == '-' ]]; then die 2 "Missing argument for option '$1'"; fi; true; }
decp() { declare -p "$@" | sed 's/^declare -[a-zA-Z-]* //'; }
xcleanup() { local -i exitcode=${1:-0}; [[ -t 0 ]] && printf '\e[?25h'; exit "$exitcode"; }
trap 'xcleanup $?' SIGINT EXIT
# ----------------------------------------------------------------------------------------

declare -x VECTORDBS=${VECTORDBS:-/var/lib/vectordbs}

usage() {
  local -i exitcode=${1:-0}
  local -- helptext=$(cat <<EOT
$PRG $VERSION - Interface into YaTTI CustomKB knowledgebase API

Requires:

    sudo apt install git curl jq gridsite-clients


Installation:

    kb-query.install


json Fields:

   kb query context_only response elapsed_seconds error


Usage:

  $PRG {command} [.field1 [.field2 ...]]

  $PRG {-c} {knowledgebase} {query} [.field1 [.field2 ...]]

  command         list||help

  knowledgebase   name of customKB knowledgebase

  query           query string for LLM

  .field{1...}    fields to output, default is all.

Options:
  -c, --context-only    Return entire context reference only,
                        do not send to LLM.
                        $(decp context_only)
  -v, --verbose         Increase output verbosity
  -q, --quiet           Suppress non-error messages
                        $(decp VERBOSE)
  -d, --debug           Print debug messages
                        $(decp DEBUG)
  -V, --version         Print version and exit
                        $(decp VERSION)
  -h, --help            Display this help

Examples:

  # Help for $PRG utility

    $PRG --help

  # Overview YaTTI knowledgebase

    $PRG help

  # List YaTTI knowledgebases

    $PRG list

  # Query knowledgebase

    $PRG appliedanthropology "Concisely define 'applied anthropology'."

  # Query knowledgebase and output fields .query and .response

    $PRG appliedanthropology "Concisely define 'applied anthropology'." .query .response

  # Query knowledgebase for context only

    $PRG appliedanthropology -c "Concisely define 'applied anthropology'."

EOT
)
  ((exitcode)) && >&2 echo "$helptext" || echo "$helptext"
  [[ -z "${1:-}" ]] && return
  exit "$exitcode"
}


kb_query() {
  #local baseurl='https://yatti.id.local/v1'
  local baseurl='https://yatti.id/v1'
  local kb="$1"
  (($#)) && shift
  local context_only=$( ((${1:-0})) && echo 'context_only' || echo '' )
  (($#)) && shift
  local query="${1:-}"
  (($#)) && shift

  local field fields='' comma='' # no comma at the start
  while (($#)); do
    field="$1"
    [[ -z $field ]] && continue
    [[ "${field:0:1}" != '.' ]] && field=".$field"
    fields+="$comma$field"
    comma=, # there could be more to come
    shift
  done
  [[ -z $fields ]] && fields='.response'

  if [[ $kb == update || $kb == upgrade ]]; then
    update_exec=/tmp/kb-query.update.from.git.sh
    cat <<-EOT >"$update_exec"
#!/bin/bash
set -euo pipefail
mkdir -p /tmp/kb-query-update
cd /tmp/kb-query-update
rm -rf kb-query
git clone https://github.com/Open-Technology-Foundation/kb-query.git
sudo kb-query/kb-query.install
EOT
    chmod 770 "$update_exec"
    exec "$update_exec"
    exit
  fi

  [[ $kb == 'list' ]] && kb='list.canonical'
  if [[ ${kb:0:5} == 'list.' ]]; then
    fields=${kb/list/.response}
    kb=list query=list
    context_only=''
  fi

  if [[ $kb == 'help' || $kb == '-h' || $kb == '--help' ]]; then
    fields=${kb/help/.response}
    kb=help query=help
    context_only=''
  fi

  # Debug output
  ((DEBUG)) && {
    IFS=$'\n' readarray -t files < <(decp kb context_only query fields)
    vdebug "${files[@]}"
  }
  curl -H "Accept: application/json" \
       -H "Content-Type: application/json" \
       -s "$baseurl/$kb/?q=$(urlencode "$query")&$context_only" \
       | jq -r $fields
}


#=============================================================================
main() {
  local -i context_only=0
  local command='' query=''
  local -a fields=()

  while (($#)); do case "$1" in
    -c|--context) context_only=1 ;;
    -d|--debug)   DEBUG=1; VERBOSE+=1;;
    -h|--help)    usage 0;; -v|--verbose) VERBOSE+=1;; -q|--quiet) VERBOSE=0;; -V|--version) echo "$PRG $VERSION"; exit 0;;
    -[cdhvqV]*) #shellcheck disable=SC2046 #split up single options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
    -*)           die 22 "Invalid option '$1'" ;;
    *)            if [[ -z $command ]]; then
                    command="$1"
                  elif [[ -z $query ]]; then
                    query="$1"
                  else
                    fields+=( "$1" )
                  fi
                  ;;
  esac; shift; done
  [[ -z $command ]] && usage 1

  vdebug "kb_query \"$command\" \"$context_only\" \"$query\" \"${fields[@]}\""

  kb_query "$command" "$context_only" "$query" ${fields[*]}

}

main "$@"
#fin
